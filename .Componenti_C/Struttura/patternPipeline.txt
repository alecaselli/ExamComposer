#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <unistd.h>

typedef int pipe_t[2];

/* struttura in cui il primo campo rapprenta valore massimo di linee calcolato dal processo e il secondo campo l'indice d'ordine (n) del processo che ha calcolato il massimo */
typedef struct
{
	int c1; /* campo v1 del testo */
	int c2; /* campo v2 del testo */
} data;

int mia_random(int n)
{
	int casuale;
	casuale = rand() % n;
	casuale++;
	return casuale;
}

int main(int argc, char **argv)
{
	int pid;						/* array STATICO di process identifier dei processi generati tramite fork */
	int pidFiglio, status, ritorno; /* per valore di ritorno figli */
	pipe_t *pf;						/* array DINAMICO di pipe usate a pipeline da primo figlio, a secondo figlio .... ultimo figlio e poi a padre: ogni processo legge dalla pipe i-1 e scrive sulla pipe i */
	pipe_t *fp;
	char c;	  /* carattere letto dai figli */
	int i, j; /* variabili di supporto usate nei cicli for */
	int fd;	  /* file descriptor del file aperto dai figli in lettura */
	data d;
	int lin;
	int nr, nw; /* variabili per salvare valori di ritorno di read e write da/su pipe */
	int N;		// numero dei file
	int L;
	int lungh;
	char linea[250];
	int r;
	printf("KEK");

	// controllo il numero dei parametri
	if (argc < 4) // va aggiunto 1 perché è il nome del programma stesso
	{
		printf("ERRORE, necessari almeno 3 parametri\n");
		exit(1);
	}
	printf("%s %s %s", argv[1], argv[2], argv[3]);
	L = argv[1][0];

	N = argc - 2;

	srand(time(NULL));

	// allocazione dell'array di N pipe descriptos
	fp = (pipe_t *)malloc(N * sizeof(pipe_t));

	// controllo che l'array fp sia stato creato correttamente
	if (fp == NULL)
	{
		printf("Errore nella allocazione della memoria\n");
		exit(2);
	}

	pf = (pipe_t *)malloc(N * sizeof(pipe_t));

	// controllo che l'array pf sia stato creato correttamente
	if (pf == NULL)
	{
		printf("Errore nella allocazione della memoria\n");
		exit(2);
	}

	// creazione delle N pipe figli-padre
	for (j = 0; j < N; j++)
	{
		if (pipe(fp[j]) < 0)
		{
			printf("Errore nella creazione della pipe\n");
			exit(3);
		}
	}

	// creazione delle N pipe padre-figli
	for (j = 0; j < N; j++)
	{
		if (pipe(pf[j]) < 0)
		{
			printf("Errore nella creazione della pipe\n");
			exit(3);
		}
	}

	for (i = 0; i < N; i++)
	{
		if ((pid = fork()) < 0)
		{
			printf("Errore nella creazione di un figlio\n");
			exit(3);
		}

		if (pid == 0)
		{ // codice del figlio

			// chiusura pipe figli-padre inutilizzate, 0 lettura, 1 scrittura
			for (j = 0; j < N; j++)
			{
				if (j != i) // chiudo tutte le scritture eccetto qulla corrente
					close(fp[j][1]);
				if ((i == 0) || (j != i - 1)) // chiudo tutte le letture eccetto quella corrente, e tutte per i=0
					close(fp[j][0]);
			}

			// chiusura pipe padre-figli inutilizzate
			for (j = 0; j < N; j++)
			{
				close(pf[j][1]);
				if (j != i)
					close(pf[j][0]);
			}

			if ((fd = open(argv[i + 2], O_RDONLY)) < 0)
			{
				printf("Errore nella apertura del file\n");
				exit(-1);
			}

			while (read(fd, &c, 1) >= 0)
			{
				if (c == '\n')
					lungh++;
			}

			if (i != 0)
			{
				/* lettura da pipe dell'array di strutture per tutti i figli a parte il primo */
				nr = read(fp[i - 1][0], &d, sizeof(d));
				if (nr != sizeof(d))
				{
					printf("Errore in lettura da pipe[%d]\n", i);
					exit(-1);
				}
			}

			if ((d.c1 < lungh) || (i == 0))
			{
				d.c1 = lungh;
				d.c2 = i;
			}

			nw = write(fp[i][1], &d, sizeof(d));
			if (nw != sizeof(d))
			{
				printf("Errore in scrittura da pipe[%d]\n", i);
				exit(-1);
			}

			nr = read(pf[i][0], &lin, sizeof(lin));
			if (nr != sizeof(lin))
			{
				printf("Errore in lettura da pipe[%d]\n", i);
				exit(-1);
			}

			if (lin > lungh)
			{
				printf("Il numero ricevuto rende la richiesta NON ammissibile");
				return 1;
			}

			printf("Indice processo: %d, PID: %d, numero ricevuto dal padre: %d, nome del file associato: %s\n", i, getpid(), lin, argv[i + 2]);

			while (read(fd, &c, 1) > 0)
			{
				if (lungh == lin)
				{
					for (j = 0; (read(fd, &c, 1) != '\n'); j++)
					{
						linea[j] = c;
					}
					linea[j + 1] = '\n';
					break;
				}

				if (c == '\n')
					lungh++;
			}

			printf("Di seguito la linea richiesta:\n");
			printf("%s", linea);

			return 0;
		}
	} // fine for

	// codice del padre
	// chiusura pipe figli-padre: tutte meno l'ultima in lettura
	for (i = 0; i < N; i++)
	{
		close(fp[i][1]);
		if (i != N - 1)
			close(fp[i][0]);
	}

	// chiusura solo lettura pipe padre-figli
	for (i = 0; i < N; i++)
	{
		close(pf[i][0]);
	}

	nr = read(fp[N - 1][0], &d, sizeof(d));
	if (nr != sizeof(d))
	{
		printf("Errore in lettura da pipe[%d]\n", i);
		exit(-1);
	}

	printf("Il numero di linee massimo calcolato è: %d, dall'indice %d relativo al file: %s\n", d.c1, d.c2, argv[(d.c2 - N)]);

	if (L == d.c1)
	{
		r = mia_random(L);

		for (i = 0; i < N; i++)
		{
			nw = write(pf[i][1], &r, sizeof(r));
			if (nw != r)
			{
				printf("Errore in scrittura da pipe[%d]\n", i);
				exit(-1);
			}
		}
	}

	/* Il padre aspetta i figli */
	for (i = 0; i < N; i++)
	{
		if ((pidFiglio = wait(&status)) < 0)
		{
			printf("Errore in wait\n");
			exit(5);
		}

		if ((status & 0xFF) != 0)
			printf("Figlio con pid %d terminato in modo anomalo\n", pidFiglio);
		else
		{
			ritorno = (int)((status >> 8) & 0xFF);
			printf("Il figlio con pid=%d ha ritornato il carattere %c (in decimale %d, se 255 problemi)\n", pidFiglio, ritorno, ritorno);
		}
	}

	exit(0);
}